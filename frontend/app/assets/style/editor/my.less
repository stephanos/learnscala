.CodeMirror {
    height: 100%;
    //overflow-y: auto;
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;

    pre {
      .selectable();
    }
    &:hover {
      .btn-group { .opacity(100); }
    }
}

.CodeMirror-scroll {
    height: 100%;
    //overflow: auto;
    position: relative;
}

.snippet div.wrapper, .CodeMirror {

    // font
    font-size:   @fs_code;
    line-height: 1.15 * @fs_code;
    /*&.call, &.output {
        line-height: 0.9 * @fs_code;
    }*/

    // color
    .bg(@c_code_bg);
    .CodeMirror-focused .CodeMirror-lines pre.activeLine {
      .bg(darken(@c_code_bg, 5%)); // highlight line on focus
    }

    .border(@c_code_border);
    box-sizing: border-box;
}

.CodeMirror, .ide {
    border-width: 2px;

    // button
    .btn-group {
        right: 16px; bottom: 16px;
        &.btn-group-left { left: 16px; bottom: 16px; }
    }
}

.snippet div.wrapper, .CodeMirror, .ide {
    // button
    .btn-group {
        .opacity(0);
        position: absolute;
        .linear-transition(opacity);

        .btn {
            .opacity(20);
            &:hover { .opacity(100); }
            .linear-transition(opacity);
        }
        .btn-icon {
            font-family: 'Entypo';
        }
    }
}

.ide .right .CodeMirror {
    // increase line-height for 'call' panel
    line-height: 1.5 * @fs_code;
}

table.codesplit {
    .border(transparent);

    tr {
        margin: 0; padding: 0;

        td {
            vertical-align: top;
            margin: 0; padding: 0;

            &.code {
                .bg(@c_code_bg);
                .border-h(@c_code_border);
                .snippet div.wrapper {
                    border: none;
                    .btn { display: none; }
                }
            }
        }

        &:first-child { td.code { .border-top(@c_code_border); } }
        &:last-child  { td.code { .border-bottom(@c_code_border);
                                  .snippet div.wrapper .btn { display: block; } }
                      }
    }
}

.snippet .cm-s-ambiance.output, .ide .output-wrap {
    // use gray for output background
    .bg(darken(#eee, 3%));

    font-size:   @fs_code;
    line-height: 1.1 * @fs_code;
}

.ide .output-wrap {
  .selectable();
  span { .selectable(); }
}

// use one plain color for output code
.snippet .cm-s-ambiance.output, .ide .output .cm-s-ambiance {
    .apply(#8f7b67);
    &.error { .apply(#cc6666); } //mix(@c, @c_hlight);

    .apply(@c) {
        .cm-keyword, .cm-atom, .cm-number, .cm-def, .cm-variable, .cm-variable-2, .cm-variable-3, .cm-word,
        .cm-property, .cm-operator, .cm-comment, .cm-string, .cm-string-2, .cm-meta, .cm-error, .cm-qualifier,
        .cm-builtin, .cm-bracket, .cm-tag, .cm-attribute, .cm-header, .cm-quote, .cm-hr, .cm-link, .cm-special {
            color: @c;
        }
    }
}

.snippet {

  width: 100%;
  position: relative;
  display: inline-block;

  >div.raw {
    display: none;
  }

  >div.code {

    text-align: left;

    >div.wrapper {

      padding: 20px 0;
      &.output { padding: 8px 0; }

      // border default: dashed top and bottom
      @c_border_f: fadeout(@c_code_border, 10%);
      border-top: 0;
      border-bottom: 0;
      //border-bottom: 1px dashed @c_border_f;
      //border-top: 1px dashed @c_border_f;

      // border first and last: solid top and bottom
      &:first-child { .border-top(@c_code_border); }
      &:last-child { .border-bottom(@c_code_border); }

      // border explicit start/middle/end: dashed
      &.first, &.middle, &.start { border-bottom: none; }
      &.last, &.middle, &.end { border-top: none; }

      // button
      .btn-group {
        &.btn-group-right {
          right: 4px; bottom: 0px;
        }

        &.btn-group-left {
          left: 0; bottom: 0;
          .btn {
            //display: none;
          }

          .btn.mark  {
            .dim(6px, 30px);
            .round(0);
            padding: 0;
          }
        }
      }

      >pre.codeline {
        overflow: hidden;
        position: relative;
        padding: 1px 20px;

        &:hover {
          .btn-group { .opacity(100); }
        }

        &.highlight {
          .bg(@c_select);

          .btn-group-left {
            display: block;
            .opacity(100);

            .btn.mark {
              .opacity(100);
              .buttonBackground(@btnDangerBackground, @btnDangerBackgroundHighlight);
            }
          }
        }
      }
    }
  }

  >.icon-annotation {
    position: absolute;
    right: -15px; bottom: -15px;
    font-family: 'Entypo';
    padding: 2px;
    .round(20px);
    .buttonBackground(@btnInverseBackground, @btnInverseBackgroundHighlight);
    .col(#fff);
    .square(40px);
    .center-text();
  }

  &.slim {
    >div.code>div.wrapper {
      padding: 8px 0;
    }
  }
}

@font-face {
    .font("Inconsolata", "inconsolata/regular");
}

.CodeMirror-gutter {
    min-width: 0;
    .bg(@c_code_bg);
    border: 0;
}
.CodeMirror-gutter-text {
    .fsize(@fs_code * 0.9);
    .col(@c_hlight);
    padding-right: 0;
}

.ide {
    .topbottom {
        height: 100%;
        width: 100%;
    }

    /*.pane {
        .CodeMirror { border-bottom: none; }
        .left .CodeMirror  { border-right: none; }
        .right .CodeMirror { border-left: none; }
    }*/

    @s: 8px;
    @dc: fade(@c_hlight, 30%);
    .vsplitbar {
        width: @s;
        background: transparent;
        &.active { background: @dc; }
    }
    .hsplitbar {
        height: @s;
        background: transparent;
        &.active { background: @dc; }
    }
}