package examples

import org.specs2._
import execute._

/**
 * This Specification shows how to declare only once the Webdriver "Outside" context in which all the examples
 * must be executed
 */
class PlayWebdriveSpec extends mutable.Specification {
  // all the examples will be executed in this Webdriver context
  implicit val server = RunIn(TestServer(3333), HTMLUNIT)

  "run in a browser" in { (browser: TestBrowser) =>
    browser.goTo("http://localhost:3333")
  }

}

// This class could be added to the Play testing library
case class RunIn(server: Server, driver: Webdriver) extends specification.AroundOutside[TestBrowser] {
  var browser: TestBrowser = null

  def outside = browser
  def around[R <% Result](a: =>R): Result = {
    try {
      server.start()
      browser = TestBrowser(driver)
      a
    } finally {
      if (browser != null) {
        browser.quit()
      }
      server.stop()
    }

  }
}

/**
 * Support classes for compilation
 */
object Running {
  def running[R <% Result](server: Server, driver: Webdriver)(f: TestBrowser => R): Result = Success()
}

import matcher.MustMatchers._
trait Server {
  def start() {}
  def stop() {}
}
case class TestServer(port: Int) extends Server
case class TestBrowser(driver: Webdriver) {
  def goTo(url: String) = 1 must_== 1
  def quit() {}
}
trait Webdriver
object HTMLUNIT extends Webdriver